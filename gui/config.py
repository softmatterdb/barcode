"""
Auto-generated GUI wrappers for config classes
Generated by: python config.py
"""

from dataclasses import dataclass, field
import tkinter as tk
from core.config import *

@dataclass
class InputConfigGUI:
    """Auto-generated GUI wrapper for InputConfig"""
    _core_config: InputConfig = field(default_factory=InputConfig)

    file_path: tk.StringVar = field(init=False)
    dir_path: tk.StringVar = field(init=False)
    mode: tk.StringVar = field(init=False)
    configuration_file: tk.StringVar = field(init=False)
    new_param: tk.BooleanVar = field(init=False)

    def __post_init__(self):
        self.file_path = tk.StringVar(value=self._core_config.file_path)
        self.dir_path = tk.StringVar(value=self._core_config.dir_path)
        self.mode = tk.StringVar(value=self._core_config.mode)
        self.configuration_file = tk.StringVar(value=self._core_config.configuration_file)
        self.new_param = tk.BooleanVar(value=self._core_config.new_param)

    @property
    def config(self) -> InputConfig:
        """Get current config from GUI values"""
        return InputConfig(
            file_path=self.file_path.get(),
            dir_path=self.dir_path.get(),
            mode=self.mode.get(),
            configuration_file=self.configuration_file.get(),
            new_param=self.new_param.get(),
        )

    def update_gui(self, new_config: InputConfig):
        """Update GUI from new config values"""
        self._core_config = new_config
        self.file_path.set(new_config.file_path)
        self.dir_path.set(new_config.dir_path)
        self.mode.set(new_config.mode)
        self.configuration_file.set(new_config.configuration_file)
        self.new_param.set(new_config.new_param)

@dataclass
class ReaderConfigGUI:
    """Auto-generated GUI wrapper for ReaderConfig"""
    _core_config: ReaderConfig = field(default_factory=ReaderConfig)

    accept_dim_channels: tk.BooleanVar = field(init=False)
    accept_dim_images: tk.BooleanVar = field(init=False)
    binarization: tk.BooleanVar = field(init=False)
    flow: tk.BooleanVar = field(init=False)
    intensity_distribution: tk.BooleanVar = field(init=False)
    verbose: tk.BooleanVar = field(init=False)

    def __post_init__(self):
        self.accept_dim_channels = tk.BooleanVar(value=self._core_config.accept_dim_channels)
        self.accept_dim_images = tk.BooleanVar(value=self._core_config.accept_dim_images)
        self.binarization = tk.BooleanVar(value=self._core_config.binarization)
        self.flow = tk.BooleanVar(value=self._core_config.flow)
        self.intensity_distribution = tk.BooleanVar(value=self._core_config.intensity_distribution)
        self.verbose = tk.BooleanVar(value=self._core_config.verbose)

    @property
    def config(self) -> ReaderConfig:
        """Get current config from GUI values"""
        return ReaderConfig(
            accept_dim_channels=self.accept_dim_channels.get(),
            accept_dim_images=self.accept_dim_images.get(),
            binarization=self.binarization.get(),
            flow=self.flow.get(),
            intensity_distribution=self.intensity_distribution.get(),
            verbose=self.verbose.get(),
        )

    def update_gui(self, new_config: ReaderConfig):
        """Update GUI from new config values"""
        self._core_config = new_config
        self.accept_dim_channels.set(new_config.accept_dim_channels)
        self.accept_dim_images.set(new_config.accept_dim_images)
        self.binarization.set(new_config.binarization)
        self.flow.set(new_config.flow)
        self.intensity_distribution.set(new_config.intensity_distribution)
        self.verbose.set(new_config.verbose)

@dataclass
class WriterConfigGUI:
    """Auto-generated GUI wrapper for WriterConfig"""
    _core_config: WriterConfig = field(default_factory=WriterConfig)

    generate_barcode: tk.BooleanVar = field(init=False)
    save_rds: tk.BooleanVar = field(init=False)
    save_visualizations: tk.BooleanVar = field(init=False)

    def __post_init__(self):
        self.generate_barcode = tk.BooleanVar(value=self._core_config.generate_barcode)
        self.save_rds = tk.BooleanVar(value=self._core_config.save_rds)
        self.save_visualizations = tk.BooleanVar(value=self._core_config.save_visualizations)

    @property
    def config(self) -> WriterConfig:
        """Get current config from GUI values"""
        return WriterConfig(
            generate_barcode=self.generate_barcode.get(),
            save_rds=self.save_rds.get(),
            save_visualizations=self.save_visualizations.get(),
        )

    def update_gui(self, new_config: WriterConfig):
        """Update GUI from new config values"""
        self._core_config = new_config
        self.generate_barcode.set(new_config.generate_barcode)
        self.save_rds.set(new_config.save_rds)
        self.save_visualizations.set(new_config.save_visualizations)

@dataclass
class ChannelConfigGUI:
    """Auto-generated GUI wrapper for ChannelConfig"""
    _core_config: ChannelConfig = field(default_factory=ChannelConfig)

    parse_all_channels: tk.BooleanVar = field(init=False)
    selected_channel: tk.IntVar = field(init=False)

    def __post_init__(self):
        self.parse_all_channels = tk.BooleanVar(value=self._core_config.parse_all_channels)
        self.selected_channel = tk.IntVar(value=self._core_config.selected_channel)

    @property
    def config(self) -> ChannelConfig:
        """Get current config from GUI values"""
        return ChannelConfig(
            parse_all_channels=self.parse_all_channels.get(),
            selected_channel=self.selected_channel.get(),
        )

    def update_gui(self, new_config: ChannelConfig):
        """Update GUI from new config values"""
        self._core_config = new_config
        self.parse_all_channels.set(new_config.parse_all_channels)
        self.selected_channel.set(new_config.selected_channel)

@dataclass
class BinarizationConfigGUI:
    """Auto-generated GUI wrapper for BinarizationConfig"""
    _core_config: BinarizationConfig = field(default_factory=BinarizationConfig)

    threshold_offset: tk.DoubleVar = field(init=False)
    frame_step: tk.IntVar = field(init=False)
    percentage_frames_evaluated: tk.DoubleVar = field(init=False)

    def __post_init__(self):
        self.threshold_offset = tk.DoubleVar(value=self._core_config.threshold_offset)
        self.frame_step = tk.IntVar(value=self._core_config.frame_step)
        self.percentage_frames_evaluated = tk.DoubleVar(value=self._core_config.percentage_frames_evaluated)

    @property
    def config(self) -> BinarizationConfig:
        """Get current config from GUI values"""
        return BinarizationConfig(
            threshold_offset=self.threshold_offset.get(),
            frame_step=self.frame_step.get(),
            percentage_frames_evaluated=self.percentage_frames_evaluated.get(),
        )

    def update_gui(self, new_config: BinarizationConfig):
        """Update GUI from new config values"""
        self._core_config = new_config
        self.threshold_offset.set(new_config.threshold_offset)
        self.frame_step.set(new_config.frame_step)
        self.percentage_frames_evaluated.set(new_config.percentage_frames_evaluated)

@dataclass
class OpticalFlowConfigGUI:
    """Auto-generated GUI wrapper for OpticalFlowConfig"""
    _core_config: OpticalFlowConfig = field(default_factory=OpticalFlowConfig)

    frame_step: tk.IntVar = field(init=False)
    win_size: tk.IntVar = field(init=False)
    downsample: tk.IntVar = field(init=False)
    um_pixel_ratio: tk.DoubleVar = field(init=False)
    exposure_time: tk.DoubleVar = field(init=False)
    percentage_frames_evaluated: tk.DoubleVar = field(init=False)

    def __post_init__(self):
        self.frame_step = tk.IntVar(value=self._core_config.frame_step)
        self.win_size = tk.IntVar(value=self._core_config.win_size)
        self.downsample = tk.IntVar(value=self._core_config.downsample)
        self.um_pixel_ratio = tk.DoubleVar(value=self._core_config.um_pixel_ratio)
        self.exposure_time = tk.DoubleVar(value=self._core_config.exposure_time)
        self.percentage_frames_evaluated = tk.DoubleVar(value=self._core_config.percentage_frames_evaluated)

    @property
    def config(self) -> OpticalFlowConfig:
        """Get current config from GUI values"""
        return OpticalFlowConfig(
            frame_step=self.frame_step.get(),
            win_size=self.win_size.get(),
            downsample=self.downsample.get(),
            um_pixel_ratio=self.um_pixel_ratio.get(),
            exposure_time=self.exposure_time.get(),
            percentage_frames_evaluated=self.percentage_frames_evaluated.get(),
        )

    def update_gui(self, new_config: OpticalFlowConfig):
        """Update GUI from new config values"""
        self._core_config = new_config
        self.frame_step.set(new_config.frame_step)
        self.win_size.set(new_config.win_size)
        self.downsample.set(new_config.downsample)
        self.um_pixel_ratio.set(new_config.um_pixel_ratio)
        self.exposure_time.set(new_config.exposure_time)
        self.percentage_frames_evaluated.set(new_config.percentage_frames_evaluated)

@dataclass
class IntensityDistributionConfigGUI:
    """Auto-generated GUI wrapper for IntensityDistributionConfig"""
    _core_config: IntensityDistributionConfig = field(default_factory=IntensityDistributionConfig)

    bin_size: tk.IntVar = field(init=False)
    frame_step: tk.IntVar = field(init=False)
    noise_threshold: tk.DoubleVar = field(init=False)
    percentage_frames_evaluated: tk.DoubleVar = field(init=False)

    def __post_init__(self):
        self.bin_size = tk.IntVar(value=self._core_config.bin_size)
        self.frame_step = tk.IntVar(value=self._core_config.frame_step)
        self.noise_threshold = tk.DoubleVar(value=self._core_config.noise_threshold)
        self.percentage_frames_evaluated = tk.DoubleVar(value=self._core_config.percentage_frames_evaluated)

    @property
    def config(self) -> IntensityDistributionConfig:
        """Get current config from GUI values"""
        return IntensityDistributionConfig(
            bin_size=self.bin_size.get(),
            frame_step=self.frame_step.get(),
            noise_threshold=self.noise_threshold.get(),
            percentage_frames_evaluated=self.percentage_frames_evaluated.get(),
        )

    def update_gui(self, new_config: IntensityDistributionConfig):
        """Update GUI from new config values"""
        self._core_config = new_config
        self.bin_size.set(new_config.bin_size)
        self.frame_step.set(new_config.frame_step)
        self.noise_threshold.set(new_config.noise_threshold)
        self.percentage_frames_evaluated.set(new_config.percentage_frames_evaluated)

@dataclass
class PreviewConfigGUI:
    """Auto-generated GUI wrapper for PreviewConfig"""
    _core_config: PreviewConfig = field(default_factory=PreviewConfig)

    sample_file: tk.StringVar = field(init=False)
    enable_live_preview: tk.BooleanVar = field(init=False)

    def __post_init__(self):
        self.sample_file = tk.StringVar(value=self._core_config.sample_file)
        self.enable_live_preview = tk.BooleanVar(value=self._core_config.enable_live_preview)

    @property
    def config(self) -> PreviewConfig:
        """Get current config from GUI values"""
        return PreviewConfig(
            sample_file=self.sample_file.get(),
            enable_live_preview=self.enable_live_preview.get(),
        )

    def update_gui(self, new_config: PreviewConfig):
        """Update GUI from new config values"""
        self._core_config = new_config
        self.sample_file.set(new_config.sample_file)
        self.enable_live_preview.set(new_config.enable_live_preview)

@dataclass
class AggregationConfigGUI:
    """Auto-generated GUI wrapper for AggregationConfig"""
    _core_config: AggregationConfig = field(default_factory=AggregationConfig)

    output_location: tk.StringVar = field(init=False)
    generate_single_barcode: tk.BooleanVar = field(init=False)
    generate_comparison_barcodes: tk.BooleanVar = field(init=False)
    sort_parameter: tk.StringVar = field(init=False)
    csv_paths_list: tk.StringVar = field(init=False)

    def __post_init__(self):
        self.output_location = tk.StringVar(value=self._core_config.output_location)
        self.generate_single_barcode = tk.BooleanVar(value=self._core_config.generate_single_barcode)
        self.generate_comparison_barcodes = tk.BooleanVar(value=self._core_config.generate_comparison_barcodes)
        self.sort_parameter = tk.StringVar(value=self._core_config.sort_parameter)
        self.csv_paths_list = tk.StringVar(value=self._core_config.csv_paths_list)

    @property
    def config(self) -> AggregationConfig:
        """Get current config from GUI values"""
        return AggregationConfig(
            output_location=self.output_location.get(),
            generate_single_barcode=self.generate_single_barcode.get(),
            generate_comparison_barcodes=self.generate_comparison_barcodes.get(),
            sort_parameter=self.sort_parameter.get(),
            csv_paths_list=self.csv_paths_list.get(),
        )

    def update_gui(self, new_config: AggregationConfig):
        """Update GUI from new config values"""
        self._core_config = new_config
        self.output_location.set(new_config.output_location)
        self.generate_single_barcode.set(new_config.generate_single_barcode)
        self.generate_comparison_barcodes.set(new_config.generate_comparison_barcodes)
        self.sort_parameter.set(new_config.sort_parameter)
        self.csv_paths_list.set(new_config.csv_paths_list)

@dataclass
class BarcodeConfigGUI:
    """Auto-generated master GUI configuration"""
    _core_config: BarcodeConfig = field(default_factory=BarcodeConfig)

    channels: ChannelConfigGUI = field(init=False)
    image_binarization_parameters: BinarizationConfigGUI = field(init=False)
    intensity_distribution_parameters: IntensityDistributionConfigGUI = field(init=False)
    optical_flow_parameters: OpticalFlowConfigGUI = field(init=False)
    reader: ReaderConfigGUI = field(init=False)
    writer: WriterConfigGUI = field(init=False)

    def __post_init__(self):
        self.channels = ChannelConfigGUI(self._core_config.channels)
        self.image_binarization_parameters = BinarizationConfigGUI(self._core_config.image_binarization_parameters)
        self.intensity_distribution_parameters = IntensityDistributionConfigGUI(self._core_config.intensity_distribution_parameters)
        self.optical_flow_parameters = OpticalFlowConfigGUI(self._core_config.optical_flow_parameters)
        self.reader = ReaderConfigGUI(self._core_config.reader)
        self.writer = WriterConfigGUI(self._core_config.writer)

    @property
    def config(self) -> BarcodeConfig:
        """Get current config from all GUI values"""
        return BarcodeConfig(
            channels=self.channels.config,
            image_binarization_parameters=self.image_binarization_parameters.config,
            intensity_distribution_parameters=self.intensity_distribution_parameters.config,
            optical_flow_parameters=self.optical_flow_parameters.config,
            reader=self.reader.config,
            writer=self.writer.config,
        )