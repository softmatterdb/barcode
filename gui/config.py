"""
Auto-generated GUI wrappers for config classes
Generated by: python config.py
"""

from dataclasses import dataclass, field
import tkinter as tk
from core.config import *

@dataclass
class InputConfigGUI:
    """Auto-generated GUI wrapper for InputConfig"""
    _core_config: InputConfig = field(default_factory=InputConfig)

    file_path: tk.StringVar = field(init=False)
    dir_path: tk.StringVar = field(init=False)
    mode: tk.StringVar = field(init=False)
    configuration_file: tk.StringVar = field(init=False)
    new_param: tk.BooleanVar = field(init=False)

    def __post_init__(self):
        self.file_path = tk.StringVar(value=self._core_config.file_path)
        self.dir_path = tk.StringVar(value=self._core_config.dir_path)
        self.mode = tk.StringVar(value=self._core_config.mode)
        self.configuration_file = tk.StringVar(value=self._core_config.configuration_file)
        self.new_param = tk.BooleanVar(value=self._core_config.new_param)

    @property
    def config(self) -> InputConfig:
        """Get current config from GUI values"""
        return InputConfig(
            file_path=self.file_path.get(),
            dir_path=self.dir_path.get(),
            mode=self.mode.get(),
            configuration_file=self.configuration_file.get(),
            new_param=self.new_param.get(),
        )

    def update_gui(self, new_config: InputConfig):
        """Update GUI from new config values"""
        self._core_config = new_config
        self.file_path.set(new_config.file_path)
        self.dir_path.set(new_config.dir_path)
        self.mode.set(new_config.mode)
        self.configuration_file.set(new_config.configuration_file)
        self.new_param.set(new_config.new_param)

@dataclass
class ChannelConfigGUI:
    """Auto-generated GUI wrapper for ChannelConfig"""
    _core_config: ChannelConfig = field(default_factory=ChannelConfig)

    parse_all_channels: tk.BooleanVar = field(init=False)
    selected_channel: tk.IntVar = field(init=False)

    def __post_init__(self):
        self.parse_all_channels = tk.BooleanVar(value=self._core_config.parse_all_channels)
        self.selected_channel = tk.IntVar(value=self._core_config.selected_channel)

    @property
    def config(self) -> ChannelConfig:
        """Get current config from GUI values"""
        return ChannelConfig(
            parse_all_channels=self.parse_all_channels.get(),
            selected_channel=self.selected_channel.get(),
        )

    def update_gui(self, new_config: ChannelConfig):
        """Update GUI from new config values"""
        self._core_config = new_config
        self.parse_all_channels.set(new_config.parse_all_channels)
        self.selected_channel.set(new_config.selected_channel)

@dataclass
class QualityConfigGUI:
    """Auto-generated GUI wrapper for QualityConfig"""
    _core_config: QualityConfig = field(default_factory=QualityConfig)

    accept_dim_images: tk.BooleanVar = field(init=False)
    accept_dim_channels: tk.BooleanVar = field(init=False)

    def __post_init__(self):
        self.accept_dim_images = tk.BooleanVar(value=self._core_config.accept_dim_images)
        self.accept_dim_channels = tk.BooleanVar(value=self._core_config.accept_dim_channels)

    @property
    def config(self) -> QualityConfig:
        """Get current config from GUI values"""
        return QualityConfig(
            accept_dim_images=self.accept_dim_images.get(),
            accept_dim_channels=self.accept_dim_channels.get(),
        )

    def update_gui(self, new_config: QualityConfig):
        """Update GUI from new config values"""
        self._core_config = new_config
        self.accept_dim_images.set(new_config.accept_dim_images)
        self.accept_dim_channels.set(new_config.accept_dim_channels)

@dataclass
class AnalysisConfigGUI:
    """Auto-generated GUI wrapper for AnalysisConfig"""
    _core_config: AnalysisConfig = field(default_factory=AnalysisConfig)

    enable_binarization: tk.BooleanVar = field(init=False)
    enable_optical_flow: tk.BooleanVar = field(init=False)
    enable_intensity_distribution: tk.BooleanVar = field(init=False)

    def __post_init__(self):
        self.enable_binarization = tk.BooleanVar(value=self._core_config.enable_binarization)
        self.enable_optical_flow = tk.BooleanVar(value=self._core_config.enable_optical_flow)
        self.enable_intensity_distribution = tk.BooleanVar(value=self._core_config.enable_intensity_distribution)

    @property
    def config(self) -> AnalysisConfig:
        """Get current config from GUI values"""
        return AnalysisConfig(
            enable_binarization=self.enable_binarization.get(),
            enable_optical_flow=self.enable_optical_flow.get(),
            enable_intensity_distribution=self.enable_intensity_distribution.get(),
        )

    def update_gui(self, new_config: AnalysisConfig):
        """Update GUI from new config values"""
        self._core_config = new_config
        self.enable_binarization.set(new_config.enable_binarization)
        self.enable_optical_flow.set(new_config.enable_optical_flow)
        self.enable_intensity_distribution.set(new_config.enable_intensity_distribution)

@dataclass
class OutputConfigGUI:
    """Auto-generated GUI wrapper for OutputConfig"""
    _core_config: OutputConfig = field(default_factory=OutputConfig)

    verbose: tk.BooleanVar = field(init=False)
    save_graphs: tk.BooleanVar = field(init=False)
    save_intermediates: tk.BooleanVar = field(init=False)
    generate_dataset_barcode: tk.BooleanVar = field(init=False)

    def __post_init__(self):
        self.verbose = tk.BooleanVar(value=self._core_config.verbose)
        self.save_graphs = tk.BooleanVar(value=self._core_config.save_graphs)
        self.save_intermediates = tk.BooleanVar(value=self._core_config.save_intermediates)
        self.generate_dataset_barcode = tk.BooleanVar(value=self._core_config.generate_dataset_barcode)

    @property
    def config(self) -> OutputConfig:
        """Get current config from GUI values"""
        return OutputConfig(
            verbose=self.verbose.get(),
            save_graphs=self.save_graphs.get(),
            save_intermediates=self.save_intermediates.get(),
            generate_dataset_barcode=self.generate_dataset_barcode.get(),
        )

    def update_gui(self, new_config: OutputConfig):
        """Update GUI from new config values"""
        self._core_config = new_config
        self.verbose.set(new_config.verbose)
        self.save_graphs.set(new_config.save_graphs)
        self.save_intermediates.set(new_config.save_intermediates)
        self.generate_dataset_barcode.set(new_config.generate_dataset_barcode)

@dataclass
class BinarizationConfigGUI:
    """Auto-generated GUI wrapper for BinarizationConfig"""
    _core_config: BinarizationConfig = field(default_factory=BinarizationConfig)

    threshold_offset: tk.DoubleVar = field(init=False)
    frame_step: tk.IntVar = field(init=False)
    frame_start_percent: tk.DoubleVar = field(init=False)
    frame_stop_percent: tk.DoubleVar = field(init=False)
    binning_number: tk.IntVar = field(init=False)
    area_size: tk.IntVar = field(init=False)

    def __post_init__(self):
        self.threshold_offset = tk.DoubleVar(value=self._core_config.threshold_offset)
        self.frame_step = tk.IntVar(value=self._core_config.frame_step)
        self.frame_start_percent = tk.DoubleVar(value=self._core_config.frame_start_percent)
        self.frame_stop_percent = tk.DoubleVar(value=self._core_config.frame_stop_percent)
        self.binning_number = tk.IntVar(value=self._core_config.binning_number)
        self.area_size = tk.IntVar(value=self._core_config.area_size)

    @property
    def config(self) -> BinarizationConfig:
        """Get current config from GUI values"""
        return BinarizationConfig(
            threshold_offset=self.threshold_offset.get(),
            frame_step=self.frame_step.get(),
            frame_start_percent=self.frame_start_percent.get(),
            frame_stop_percent=self.frame_stop_percent.get(),
            binning_number=self.binning_number.get(),
            area_size=self.area_size.get(),
        )

    def update_gui(self, new_config: BinarizationConfig):
        """Update GUI from new config values"""
        self._core_config = new_config
        self.threshold_offset.set(new_config.threshold_offset)
        self.frame_step.set(new_config.frame_step)
        self.frame_start_percent.set(new_config.frame_start_percent)
        self.frame_stop_percent.set(new_config.frame_stop_percent)
        self.binning_number.set(new_config.binning_number)
        self.area_size.set(new_config.area_size)

@dataclass
class OpticalFlowConfigGUI:
    """Auto-generated GUI wrapper for OpticalFlowConfig"""
    _core_config: OpticalFlowConfig = field(default_factory=OpticalFlowConfig)

    frame_step: tk.IntVar = field(init=False)
    window_size: tk.IntVar = field(init=False)
    downsample_factor: tk.IntVar = field(init=False)
    nm_pixel_ratio: tk.DoubleVar = field(init=False)
    frame_interval_s: tk.IntVar = field(init=False)
    binning_number: tk.IntVar = field(init=False)

    def __post_init__(self):
        self.frame_step = tk.IntVar(value=self._core_config.frame_step)
        self.window_size = tk.IntVar(value=self._core_config.window_size)
        self.downsample_factor = tk.IntVar(value=self._core_config.downsample_factor)
        self.nm_pixel_ratio = tk.DoubleVar(value=self._core_config.nm_pixel_ratio)
        self.frame_interval_s = tk.IntVar(value=self._core_config.frame_interval_s)
        self.binning_number = tk.IntVar(value=self._core_config.binning_number)

    @property
    def config(self) -> OpticalFlowConfig:
        """Get current config from GUI values"""
        return OpticalFlowConfig(
            frame_step=self.frame_step.get(),
            window_size=self.window_size.get(),
            downsample_factor=self.downsample_factor.get(),
            nm_pixel_ratio=self.nm_pixel_ratio.get(),
            frame_interval_s=self.frame_interval_s.get(),
            binning_number=self.binning_number.get(),
        )

    def update_gui(self, new_config: OpticalFlowConfig):
        """Update GUI from new config values"""
        self._core_config = new_config
        self.frame_step.set(new_config.frame_step)
        self.window_size.set(new_config.window_size)
        self.downsample_factor.set(new_config.downsample_factor)
        self.nm_pixel_ratio.set(new_config.nm_pixel_ratio)
        self.frame_interval_s.set(new_config.frame_interval_s)
        self.binning_number.set(new_config.binning_number)

@dataclass
class IntensityDistributionConfigGUI:
    """Auto-generated GUI wrapper for IntensityDistributionConfig"""
    _core_config: IntensityDistributionConfig = field(default_factory=IntensityDistributionConfig)

    first_frame: tk.IntVar = field(init=False)
    last_frame: tk.IntVar = field(init=False)
    frames_evaluation_percent: tk.DoubleVar = field(init=False)

    def __post_init__(self):
        self.first_frame = tk.IntVar(value=self._core_config.first_frame)
        self.last_frame = tk.IntVar(value=self._core_config.last_frame)
        self.frames_evaluation_percent = tk.DoubleVar(value=self._core_config.frames_evaluation_percent)

    @property
    def config(self) -> IntensityDistributionConfig:
        """Get current config from GUI values"""
        return IntensityDistributionConfig(
            first_frame=self.first_frame.get(),
            last_frame=self.last_frame.get(),
            frames_evaluation_percent=self.frames_evaluation_percent.get(),
        )

    def update_gui(self, new_config: IntensityDistributionConfig):
        """Update GUI from new config values"""
        self._core_config = new_config
        self.first_frame.set(new_config.first_frame)
        self.last_frame.set(new_config.last_frame)
        self.frames_evaluation_percent.set(new_config.frames_evaluation_percent)

@dataclass
class PreviewConfigGUI:
    """Auto-generated GUI wrapper for PreviewConfig"""
    _core_config: PreviewConfig = field(default_factory=PreviewConfig)

    sample_file: tk.StringVar = field(init=False)
    enable_live_preview: tk.BooleanVar = field(init=False)

    def __post_init__(self):
        self.sample_file = tk.StringVar(value=self._core_config.sample_file)
        self.enable_live_preview = tk.BooleanVar(value=self._core_config.enable_live_preview)

    @property
    def config(self) -> PreviewConfig:
        """Get current config from GUI values"""
        return PreviewConfig(
            sample_file=self.sample_file.get(),
            enable_live_preview=self.enable_live_preview.get(),
        )

    def update_gui(self, new_config: PreviewConfig):
        """Update GUI from new config values"""
        self._core_config = new_config
        self.sample_file.set(new_config.sample_file)
        self.enable_live_preview.set(new_config.enable_live_preview)

@dataclass
class AggregationConfigGUI:
    """Auto-generated GUI wrapper for AggregationConfig"""
    _core_config: AggregationConfig = field(default_factory=AggregationConfig)

    output_location: tk.StringVar = field(init=False)
    generate_barcode: tk.BooleanVar = field(init=False)
    sort_parameter: tk.StringVar = field(init=False)
    normalize_barcode: tk.BooleanVar = field(init=False)
    csv_paths_list: tk.StringVar = field(init=False)

    def __post_init__(self):
        self.output_location = tk.StringVar(value=self._core_config.output_location)
        self.generate_barcode = tk.BooleanVar(value=self._core_config.generate_barcode)
        self.sort_parameter = tk.StringVar(value=self._core_config.sort_parameter)
        self.normalize_barcode = tk.BooleanVar(value=self._core_config.normalize_barcode)
        self.csv_paths_list = tk.StringVar(value=self._core_config.csv_paths_list)

    @property
    def config(self) -> AggregationConfig:
        """Get current config from GUI values"""
        return AggregationConfig(
            output_location=self.output_location.get(),
            generate_barcode=self.generate_barcode.get(),
            sort_parameter=self.sort_parameter.get(),
            normalize_barcode=self.normalize_barcode.get(),
            csv_paths_list=self.csv_paths_list.get(),
        )

    def update_gui(self, new_config: AggregationConfig):
        """Update GUI from new config values"""
        self._core_config = new_config
        self.output_location.set(new_config.output_location)
        self.generate_barcode.set(new_config.generate_barcode)
        self.sort_parameter.set(new_config.sort_parameter)
        self.normalize_barcode.set(new_config.normalize_barcode)
        self.csv_paths_list.set(new_config.csv_paths_list)

@dataclass
class BarcodeConfigGUI:
    """Auto-generated master GUI configuration"""
    _core_config: BarcodeConfig = field(default_factory=BarcodeConfig)

    channels: ChannelConfigGUI = field(init=False)
    quality: QualityConfigGUI = field(init=False)
    analysis: AnalysisConfigGUI = field(init=False)
    output: OutputConfigGUI = field(init=False)
    binarization: BinarizationConfigGUI = field(init=False)
    optical_flow: OpticalFlowConfigGUI = field(init=False)
    intensity_distribution: IntensityDistributionConfigGUI = field(init=False)

    def __post_init__(self):
        self.channels = ChannelConfigGUI(self._core_config.channels)
        self.quality = QualityConfigGUI(self._core_config.quality)
        self.analysis = AnalysisConfigGUI(self._core_config.analysis)
        self.output = OutputConfigGUI(self._core_config.output)
        self.binarization = BinarizationConfigGUI(self._core_config.binarization)
        self.optical_flow = OpticalFlowConfigGUI(self._core_config.optical_flow)
        self.intensity_distribution = IntensityDistributionConfigGUI(self._core_config.intensity_distribution)

    @property
    def config(self) -> BarcodeConfig:
        """Get current config from all GUI values"""
        return BarcodeConfig(
            channels=self.channels.config,
            quality=self.quality.config,
            analysis=self.analysis.config,
            output=self.output.config,
            binarization=self.binarization.config,
            optical_flow=self.optical_flow.config,
            intensity_distribution=self.intensity_distribution.config,
        )