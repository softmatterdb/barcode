"""
GUI generation logic for config dataclasses.
"""

from dataclasses import fields
import os
from core.config import *


def get_tk_var_type(python_type):
    """Map Python types to tkinter variable types."""
    mapping = {
        int: "tk.IntVar",
        float: "tk.DoubleVar",
        bool: "tk.BooleanVar",
        str: "tk.StringVar",
    }
    return mapping.get(python_type, "tk.StringVar")


def generate_gui_wrapper(config_class):
    """Generate GUI wrapper for a config class."""
    class_name = f"{config_class.__name__}GUI"

    lines = [
        f"@dataclass",
        f"class {class_name}:",
        f'    """Auto-generated GUI wrapper for {config_class.__name__}"""',
        f"    _core_config: {config_class.__name__} = field(default_factory={config_class.__name__})",
        f"",
    ]

    # Generate tkinter variable fields
    for field in fields(config_class):
        tk_type = get_tk_var_type(field.type)
        lines.append(f"    {field.name}: {tk_type} = field(init=False)")

    # Generate __post_init__
    lines.extend([f"", f"    def __post_init__(self):",])

    for field in fields(config_class):
        tk_type = get_tk_var_type(field.type)
        lines.append(
            f"        self.{field.name} = {tk_type}(value=self._core_config.{field.name})"
        )

    # Generate config property
    lines.extend(
        [
            f"",
            f"    @property",
            f"    def config(self) -> {config_class.__name__}:",
            f'        """Get current config from GUI values"""',
            f"        return {config_class.__name__}(",
        ]
    )

    for field in fields(config_class):
        lines.append(f"            {field.name}=self.{field.name}.get(),")

    lines.append(f"        )")

    # Generate update_gui method
    lines.extend(
        [
            f"",
            f"    def update_gui(self, new_config: {config_class.__name__}):",
            f'        """Update GUI from new config values"""',
            f"        self._core_config = new_config",
        ]
    )

    for field in fields(config_class):
        lines.append(f"        self.{field.name}.set(new_config.{field.name})")

    return "\n".join(lines)


def generate_master_gui_config():
    """Generate BarcodeConfigGUI."""
    lines = [
        "@dataclass",
        "class BarcodeConfigGUI:",
        '    """Auto-generated master GUI configuration"""',
        "    _core_config: BarcodeConfig = field(default_factory=BarcodeConfig)",
        "",
    ]

    # Generate GUI subconfig fields
    for field_name in BarcodeConfig.__dataclass_fields__:
        config_class = BarcodeConfig.__dataclass_fields__[field_name].default_factory
        lines.append(
            f"    {field_name}: {config_class.__name__}GUI = field(init=False)"
        )

    # Generate __post_init__
    lines.extend(
        [
            "",
            "    def __post_init__(self):",
        ]
    )

    for field_name in BarcodeConfig.__dataclass_fields__:
        config_class = BarcodeConfig.__dataclass_fields__[field_name].default_factory
        core_config = f"self._core_config.{field_name}"
        lines.append(
            f"        self.{field_name} = {config_class.__name__}GUI({core_config})"
        )

    # Generate config property
    lines.extend(
        [
            "",
            "    @property",
            "    def config(self) -> BarcodeConfig:",
            '        """Get current config from all GUI values"""',
            "        return BarcodeConfig(",
        ]
    )

    for field_name in BarcodeConfig.__dataclass_fields__:
        lines.append(f"            {field_name}=self.{field_name}.config,")

    lines.append("        )")

    return "\n".join(lines)


def generate_gui_module(config_classes_to_generate):
    """Generate complete GUI module."""
    lines = [
        '"""',
        "Auto-generated GUI wrappers for config classes",
        "Generated by: python config.py",
        '"""',
        "",
        "from dataclasses import dataclass, field",
        "import tkinter as tk",
        "from core.config import *",
        "",
    ]

    # Generate individual GUI classes
    for config_class in config_classes_to_generate:
        lines.append(generate_gui_wrapper(config_class))
        lines.append("")

    # Generate master GUI config
    lines.append(generate_master_gui_config())

    return "\n".join(lines)


def create_gui_configs(config_classes_to_generate, output_dir="gui"):
    """Create GUI configuration files."""
    print("üîß Generating GUI configs...")

    # Ensure output directory exists
    os.makedirs(output_dir, exist_ok=True)

    # Generate GUI module
    gui_code = generate_gui_module(config_classes_to_generate)

    with open(f"{output_dir}/config.py", "w") as f:
        f.write(gui_code)

    print(f"‚úÖ Generated GUI configs in {output_dir}/config.py")
    print(f"üìÅ Generated {len(config_classes_to_generate)} config GUIs")

    return len(config_classes_to_generate)
